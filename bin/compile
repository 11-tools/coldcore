#!/usr/bin/env python3
"""
Used to compile the `src/` files into a single executable Python script
that's still decently auditable.
"""

from pathlib import Path
import re


def render_file():
    src = Path("src/coldcore")
    cc = (src / "main.py").read_bytes().splitlines()
    newlines = []

    for line in cc:
        third_match = re.search(b"^from \.thirdparty\.(?P<name>\\S+) import", line)
        match = re.search(b"^from \.(?P<name>\\S+) import", line)

        sep = f"# {'-' * 78}\n".encode()

        def inlined_from_delimiters(name):
            begin = f"# --- inlined from src/coldcore/{name} "
            end = f"# --- end inlined from src/coldcore/{name} "
            begin = f"{begin}{'-' * (80 - len(begin))}"
            end = f"{end}{'-' * (80 - len(end))}"
            return (begin, end)

        if third_match:
            name = third_match.group(1).decode() + ".py"
            contents = Path(src / "thirdparty" / name).read_bytes().splitlines()
            delim = inlined_from_delimiters("thirdparty/" + name)
            newlines.extend(
                [
                    b"\n",
                    delim[0].encode(),
                    sep,
                    *contents,
                    b"\n\n" + delim[1].encode(),
                    sep,
                    b"\n",
                ]
            )
        elif match:
            name = match.group(1).decode() + ".py"
            contents = Path(src / name).read_bytes().splitlines()
            delim = inlined_from_delimiters(name)
            newlines.extend(
                [
                    b"\n",
                    delim[0].encode(),
                    sep,
                    *contents,
                    b"\n\n" + delim[1].encode(),
                    sep,
                    b"\n",
                ]
            )
        else:
            newlines.append(line)

    Path("coldcore").write_bytes(b"\n".join(newlines))


if __name__ == "__main__":
    render_file()
